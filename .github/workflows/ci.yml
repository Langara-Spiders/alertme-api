name: alertme api ci workflow

on:
  push:
    branches: [ "Initiate-code-for-backend-and-run-it-through-docker" ]
  pull_request:
    branches: [ "Initiate-code-for-backend-and-run-it-through-docker" ]

jobs:

  pre-run:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Login Dockerhub
      env:
        DOCKER_USERNAME: ${{secrets.DOCKERHUB_USER}}
        DOCKER_PASSWORD: ${{secrets.DOCKERHUB_TOKEN}}
      run: docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD

    - name: Set up Docker Compose
      run: sudo apt-get update && sudo apt-get install -y docker-compose jq

    - name: Extract Git commit SHA
      id: vars
      run: echo "GIT_SHA=${GITHUB_SHA::7}" >> $GITHUB_ENV

    - name: Create .env file
      run: |
        touch .env
        echo '${{ toJSON(secrets) }}' | jq -r 'keys[] as $k | "\($k)=\(.[$k])"' >> .env
  
  build:
    runs-on: ubuntu-latest
    needs: pre-run
    steps:
    
    - name: Build the docker image
      env:
        DOCKER_USERNAME: ${{secrets.DOCKERHUB_USER}}
        GIT_SHA: ${{ env.GIT_SHA }}
      run: |
        TAG=${{ env.GIT_SHA }}
        echo "TAG: $TAG"
        echo $DOCKER_USERNAME
        docker-compose build app
        IMAGE_ID=$(docker images | grep alertme-api | head -n 1 | awk '{print $3}')
        echo "IMAGE_ID: $IMAGE_ID"
        docker tag $IMAGE_ID $DOCKER_USERNAME/alertme-api:$TAG
        docker tag $IMAGE_ID $DOCKER_USERNAME/alertme-api:latest
  
  start:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - name: Start the container
      run: docker-compose up -d app

  test:
    runs-on: ubuntu-latest
    needs: start
    steps:
    - name: Run tests in Docker container
      run: |
        TAG=${{ env.GIT_SHA }}
        docker-compose exec -T app python manage.py test
      env:
        GIT_SHA: ${{ env.GIT_SHA }}

  upload-image:
    runs-on: ubuntu-latest
    needs: start
    steps:
    - name: Push Docker images
      if: success()
      run: |
        TAG=${{ env.GIT_SHA }}  
        echo "$DOCKER_USERNAME"
        docker push $DOCKER_USERNAME/alertme-api:$TAG
        docker push $DOCKER_USERNAME/alertme-api:latest
      env:
        TAG: ${{ env.GIT_SHA }}
        DOCKER_USERNAME: ${{secrets.DOCKERHUB_USER}}        
